version: '3'

services:
  consul:
    image: hashicorp/consul:latest
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: "agent -dev -client=0.0.0.0"
    volumes:
      - consul_data:/consul/data
      - ./configs/consul-config:/consul/config
    networks:
      - dockerlab

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_STORAGE_CONSUL_ADDRESS=consul:8500
      - VAULT_API_ADDR=http://vault:8200
    command: "server -dev -dev-root-token-id=root"
    volumes:
      - vault_data:/vault/data
    networks:
      - dockerlab
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/v1/sys/health"]
      interval: 30s
      retries: 3
      start_period: 10s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./configs/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    networks:
      - dockerlab

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "dockerlabadmin"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - dockerlab

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - dockerlab

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: "dockerlabadmin"
      POSTGRES_USER: "postgres"
      POSTGRES_DB: "dockerlab"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dockerlab

  fluentbit:
    image: fluent/fluent-bit:1.8.3
    container_name: fluentbit
    platform: linux/arm64/v8
    environment:
      - FLUENT_ELASTICSEARCH_HOST=elasticsearch:9200
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./configs/fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    networks:
      - dockerlab

  # Filebeat for log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.0.0
    container_name: filebeat
    platform: linux/arm64/v8  # Specify ARM64 platform
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./configs/fluentbit/fluent-bit.conf:/usr/share/filebeat/fluent-bit.conf
    networks:
      - dockerlab

  # Elasticsearch for storing logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=changeme
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - dockerlab

  # Kibana for visualizing logs
  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.0
    container_name: kibana
    platform: linux/arm64/v8  # Specify ARM64 platform
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - dockerlab

networks:
  dockerlab:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  consul_data:
  vault_data:
  postgres_data:
  es_data:
